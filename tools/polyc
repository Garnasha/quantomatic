#!/bin/bash

PRG="$(basename "$0")"

usage () {
	echo "usage: ${PRG} <file>"
	echo "  where <file> is the SML file to be used."
	echo
	echo "OPTIONS"
	echo "-h          print this message"
	echo "-m m        use the ML function 'm' as main-function"
	echo "-o b        set the name of the generated binary to 'b'"
	echo "-t          build custom top-level"
	echo "-l <heap>   load <heap> before using <file>"
}

while getopts "htm:o:l:" opt
do
	case "$opt" in
		h)
			usage
			exit 0
		;;
		o)
			PROG="$OPTARG"
		;;
		m)
			MAIN="$OPTARG"
		;;
		t)
			TOP=1
		;;
		l)
			HEAP="$OPTARG"
		;;
		\?)
			usage >&2
			exit 1
		;;
	esac
done
shift $((OPTIND-1))

if [[ $# < 1 ]]
then
  echo "No SML file given" >&2
  usage >&2
  exit 1
elif [[ $# > 1 ]]
then
  echo "Too many file arguments" >&2
  usage >&2
  exit 1
fi
FILE="$1"

TOOLS_DIR="$(cd "$(dirname $0)"; pwd)";
POLYML_HOME="$($TOOLS_DIR/findpoly.sh)"
if [ "$POLYML_HOME" == "" ]; then
	echo 'Cannot find Poly/ML (try setting $POLYML_HOME)'
	exit 1
fi
POLY="$POLYML_HOME/bin/poly"
POLYML_LIB="$POLYML_HOME/lib"

NAME="${FILE%%.*}"
if [[ $PROG == "" ]]; then PROG=$NAME; fi
if [[ $TOP ]]
then
	MAIN="PolyML.rootFunction"
elif [[ $MAIN == "" ]]
then
	MAIN="main"
fi

OBJEXT=".o"
case "$(uname -s 2>/dev/null)" in
	Darwin)
		LDFLAGS="$LDFLAGS -segprot POLY rwx rwx"
		;;
	CYGWIN*|Cygwin*|cygwin*)
		OBJEXT=".obj"
		;;
esac

if [ -z "$TMPDIR" ]; then
  TMPDIR="/tmp"
fi
BUILDFILE="$(mktemp $TMPDIR/tmp.XXXXXXXXXX.ML)"

echo "val _ = PolyML.Compiler.printDepth := 0;" > "$BUILDFILE"

if [[ $HEAP != "" ]]; then
	cat >> "$BUILDFILE" <<- EOF
		local
		  fun bad_load msg =
		    (TextIO.print ("Could not load heap \\"${HEAP}\\": "^msg^"\\n");
		     OS.Process.exit OS.Process.failure);
		  fun bad_load_exn exp =
		    (TextIO.print ("Could not load heap \\"${HEAP}\\"\\n");
		     PolyML.prettyPrint (TextIO.print,80)
		                        (PolyML.prettyRepresentation (exp,5));
		     OS.Process.exit OS.Process.failure);
		in
		  val _ = PolyML.SaveState.loadState "${HEAP}"
		    handle OS.SysErr (msg,_) => bad_load msg
		         | Fail msg => bad_load msg
		         | exp => bad_load_exn exp;
		end;
		EOF
fi

cat >> "$BUILDFILE" <<- EOF
	PolyML.exception_trace (fn () => use "${FILE}")
	    handle IO.Io {name="${FILE}",cause=(OS.SysErr (msg,_)),...} =>
	           (TextIO.print ("Could not open file \"${FILE}\": "^msg^"\n");
	            OS.Process.exit OS.Process.failure)
	         | _ =>
	           (TextIO.print ("Exception raised when usiing file \"${FILE}\"\n");
	            OS.Process.exit OS.Process.failure);
	fun trap f () = (PolyML.exception_trace f; OS.Process.exit OS.Process.success)
	                handle _ => OS.Process.exit OS.Process.failure;
	PolyML.shareCommonData ${MAIN};
	PolyML.fullGC();
	PolyML.export("${PROG}", trap ${MAIN});
	val _ = OS.Process.exit OS.Process.success;
	EOF
${POLY} -q $POLYFLAGS --use "$BUILDFILE"
POLYEXIT=$?
rm -f "$BUILDFILE"

if [[ $POLYEXIT == 0 ]]; then
	export LD_RUN_PATH="$POLYML_LIB:$LD_RUN_PATH"
	cc $LDFLAGS "-L${POLYML_LIB}" -lpolymain -lpolyml -o "${PROG}" "${PROG}${OBJEXT}"
	rm -f "${PROG}${OBJEXT}"
else
	exit $POLYEXIT
fi

# vi:ts=4:sts=4:sw=4:noet
