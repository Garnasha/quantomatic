#!/bin/bash

PRG="$(basename "$0")"

usage () {
  echo "usage: ${PRG} <file>"
  echo "  where <file> is the SML file to be used."

  echo "OPTIONS"
  echo "-h         print this message"
  echo "-p         set if <file> uses PolyML.Project"
  echo "-o <heap>  set the name of the generated heap to <heap>"
}

while getopts "hpo:" opt
do
    case "$opt" in
    h)
      usage
      exit 0
    ;;
    o)
      HEAP="$OPTARG"
    ;;
    p)
      PROJECT=1
    ;;
    \?)
      usage >&2
      exit 1
    ;;
  esac
done
shift $((OPTIND-1))

if [[ $# < 1 ]]
then
  echo "No SML file given" >&2
  usage >&2
  exit 1
elif [[ $# > 1 ]]
then
  echo "Too many file arguments" >&2
  usage >&2
  exit 1
fi
FILE="$1"

TOOLS_DIR="$(cd "$(dirname $0)"; pwd)";
POLYML_HOME="$($TOOLS_DIR/findpoly.sh)"
if [ "$POLYML_HOME" == "" ]; then
  echo 'Cannot find Poly/ML (try setting $POLYML_HOME)'
  exit 1
fi
POLY="$POLYML_HOME/bin/poly"

if [[ $HEAP == "" ]]; then HEAP="${FILE%%.*}.heap"; fi
PROJECT_MAGIC=""
if [[ $PROJECT ]]; then
  PROJECT_MAGIC="PolyML.Project.ensure_at_latest_heap ();"
fi

if [ -z "$TMPDIR" ]; then
  TMPDIR="/tmp"
fi
BUILDFILE="$(mktemp $TMPDIR/tmp.XXXXXXXXXX.ML)"

cat > "$BUILDFILE" <<- EOF
val _ = PolyML.Compiler.printDepth := 0;
val _ = PolyML.exception_trace (fn () => PolyML.use "${FILE}")
    handle IO.Io {name="${FILE}",cause=(OS.SysErr (msg,_)),...} =>
           (TextIO.print ("Could not open file \"${FILE}\": "^msg^"\n");
            OS.Process.exit OS.Process.failure)
         | _ => OS.Process.exit OS.Process.failure;
${PROJECT_MAGIC}
PolyML.fullGC ();
PolyML.SaveState.saveState "${HEAP}";
val _ = OS.Process.exit OS.Process.success;
EOF
${POLY} -q $POLYFLAGS --use "$BUILDFILE"
POLYEXIT=$?
rm -f "$BUILDFILE"
exit $POLYEXIT

