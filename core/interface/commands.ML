structure Commands =
struct
                   (* FIXME: Perhaps we don't actually want a ConsoleRequest - we just parse the command directly *)
  datatype request = ConsoleRequest of { requestId: string, command: string }  (* C *)
                   | ConsoleCommandListRequest of { requestId: string }                      (* L *)
                   | ConsoleCommandHelpRequest of { requestId: string, commandName: string } (* H *)

                   (* Graph commands: G *)
                     (* NameListResponse *)
                   | ListGraphsRequest of { requestId: string }                                                  (* GL *)
                     (* NameResponse | ErrorResponse *)
                   | LoadGraphRequest of { requestId: string, details: graphLoadRequest }                        (* GO *)
                     (* OkResponse | ErrorResponse *)
                   | SaveGraphToFileRequest of { requestId: string, graphName: string, fileName: string }        (* GS *)
                     (* NameResponse | ErrorResponse *)
                   | RenameGraphRequest of { requestId: string, oldName: string, newName: string }               (* GR *)
                     (* OkResponse | ErrorResponse *)
                   | DiscardGraphRequest of { requestId: string, graphName: string }                             (* GD *)
                     (* DataResponse | ErrorResponse *)
                   | ExportGraphRequest of { requestId: string, graphName: string, format: graphFormat }         (* GE *)
                   | DescribeGraphRequest of { requestId: string, graphName: string, desc: graphDescribeAction } (* GV *)
                   | EditGraphRequest of { requestId: string, graphName: string, action: graphEditAction }       (* GM *)

                   (* Ruleset commands: RS *)
                     (* OkResponse | ErrorResponse *)
                   | ImportRulesetFromFileRequest of { requestId: string, fileName: string } (* RSO *)
                     (* OkResponse | ErrorResponse *)
                   | ImportRulesetFromDataRequest of { requestId: string, data: string }     (* RSI *)
                     (* OkResponse | ErrorResponse *)
                   | ExportRulesetToFileRequest of { requestId: string, fileName: string }   (* RSS *)
                     (* OkResponse | ErrorResponse *)
                   | ExportRulesetAsDataRequest of { requestId: string, data: string }       (* RSE *)

                   (* Rule commands: RR *)
                     (* NameListResponse *)
                   | ListRulesRequest of { requestId: string }                        (* RRL *)
                     (* NameListResponse *)
                   | ListActiveRulesRequest of { requestId: string }                  (* RRA *)
                     (* NameListResponse | ErrorResponse *)
                   | ListRulesByTagRequest of { requestId: string, tagName: string }  (* RRT *)
                   | OpenRuleLhsRequest of { requestId: string, ruleName: string }    (* RRP *)
                   | OpenRuleRhsRequest of { requestId: string, ruleName: string }    (* RRQ *)
                     (* OkResponse | ErrorResponse *)
                   | SetRuleRequest of { requestId: string, ruleName: string, lhsGraphName: string, rhsGraphName: string } (* RRU *)
                     (* OkResponse | ErrorResponse *)
                   | DeleteRuleRequest of { requestId: string, ruleName: string }     (* RRD *)
                     (* OkResponse | ErrorResponse *)
                   | ActivateRuleRequest of { requestId: string, ruleName: string }   (* RRY *)
                     (* OkResponse | ErrorResponse *)
                   | DeactivateRuleRequest of { requestId: string, ruleName: string } (* RRN *)

                   (* Tag commands: RT *)
                     (* NameListResponse *)
                   | ListTagsRequest of { requestId: string }                                     (* RTL *)
                     (* OkResponse | ErrorResponse *)
                   | TagRuleRequest of { requestId: string, ruleName: string, tagName: string }   (* RTT *)
                     (* OkResponse | ErrorResponse *)
                   | UntagRuleRequest of { requestId: string, ruleName: string, tagName: string } (* RTU *)
                     (* OkResponse | ErrorResponse *)
                   | ForgetTagRequest of { requestId: string, tagName: string }                   (* RTF *)
                     (* OkResponse | ErrorResponse *)
                   | DeleteRulesByTagRequest of { requestId: string, tagName: string }            (* RTD *)
                     (* OkResponse | ErrorResponse *)
                   | ActivateRulesByTagRequest of { requestId: string, tagName: string }          (* RTA *)
                     (* OkResponse | ErrorResponse *)
                   | DeactivateRulesByTagRequest of { requestId: string, tagName: string }        (* RTA *)

                   (* Rewrite commands: W *)
                   | AttachRewritesRequest of { requestId: string, graphName: string }                   (* WA *)
                   | AttachOneRewriteRequest of { requestId: string, graphName: string }                 (* WO *)
                   | ListAttachedRewritesRequest of { requestId: string, graphName: string }             (* WL *)
                   | ApplyAttachedRewriteRequest of { requestId: string, graphName: string, index: int } (* WW *)

                   | UnknownRequest of { startChar: char }

       (* GO *)
       and graphLoadRequest = LoadEmptyGraphRequest                                                  (* GOE *)
                            | LoadGraphFromFileRequest of { fileName: string }                       (* GOF *)
                            | LoadGraphFromDataRequest of { data: string }                           (* GOD *)
                            | CopyGraphRequest of { graphName: string }                              (* GOG *)
                            | CopySubgraphRequest of { graphName: string, vertexNames: string list } (* GOS *)

                       (* Native format: suitable for saving to a file and loading again *)
       and graphFormat = Native       (* GEN *)
                       | HilbertSpace (* GEH *)
                       | Mathematica  (* GEM *)
                       | Matlab       (* GEL *)
                       | Tikz         (* GET *)

                                 (* GraphDescriptionResponse | ErrorResponse *)
       and graphDescribeAction = DescribeFullGraph                          (* GVA *)
                                 (* NameListResponse | ErrorResponse *)
                               | ListVertices                               (* GVV *)
                                 (* NameListResponse | ErrorResponse *)
                               | ListEdges                                  (* GVE *)
                                 (* NameListResponse | ErrorResponse *)
                               | ListBangBoxes                              (* GVB *)
                                 (* ComponentDataResponse | ErrorResponse *)
                               | VertexData of { vertexName: string }       (* GVW *)
                                 (* UserDataResponse | ErrorResponse *)
                               | VertexUserData of { vertexName: string }   (* GVX *)
                                 (* ComponentDataResponse | ErrorResponse *)
                               | EdgeData of { edgeName: string }           (* GVF *)
                                 (* UserDataResponse | ErrorResponse *)
                               | EdgeUserData of { edgeName: string }       (* GVG *)
                                 (* NameListResponse | ErrorResponse *)
                               | BangBoxVertices of { bangBoxName: string } (* GVC *)
                                 (* UserDataResponse | ErrorResponse *)
                               | BangBoxUserData of { bangBoxName: string } (* GVD *)

                             (* OkResponse | ErrorResponse *)
       and graphEditAction = UndoAction                                                                (* GMU *)
                             (* OkResponse | ErrorResponse *)
                           | RedoAction                                                                (* GMR *)
                             (* OkResponse | ErrorResponse *)
                           | InsertGraphAction of { graphName: string }                                (* GMI *)
                             (* VertexDescriptionAction | ErrorResponse *)
                           | AddVertexAction of { vertexType: string }                                 (* GMVA *)
                             (* FIXME: do we need this? *)
                             (* NameResponse | ErrorResponse *)
                           | RenameVertexAction of { oldName: string, newName: string }                (* GMVR *)
                             (* OkResponse | ErrorResponse *)
                           | DeleteVerticesAction of { vertexNames: string list }                      (* GMVD *)
                             (* OkResponse | ErrorResponse *)
                           | SetVertexDataAction of { vertexName: string, vertexData: componentData }  (* GMVS *)
                             (* OkResponse | ErrorResponse *)
                           | SetVertexUserDataAction of { vertexName: string, userData: string }       (* GMVU *)
                             (* EdgeDescriptionAction | ErrorResponse *)
                           | AddEdgeAction of { edgeType: string }                                     (* GMEA *)
                             (* FIXME: do we need this? *)
                             (* NameResponse | ErrorResponse *)
                           | RenameEdgeAction of { oldName: string, newName: string }                  (* GMER *)
                             (* OkResponse | ErrorResponse *)
                           | DeleteEdgesAction of { edgeNames: string list }                           (* GMED *)
                             (* OkResponse | ErrorResponse *)
                           | SetEdgeDataAction of { edgeName: string, edgeData: componentData }        (* GMES *)
                             (* OkResponse | ErrorResponse *)
                           | SetEdgeUserDataAction of { edgeName: string, userData: string }           (* GMEU *)
                             (* NameResponse | ErrorResponse *)
                           | AddBangBoxAction                                                          (* GMBA *)
                             (* OkResponse | ErrorResponse *)
                           | DropBangBoxesAction of { bangBoxNames: string list }                      (* GMBD *)
                             (* OkResponse | ErrorResponse *)
                           | KillBangBoxesAction of { bangBoxNames: string list }                      (* GMBK *)
                             (* NameResponse | ErrorResponse *)
                           | DuplicateBangBoxAction of { bangBoxName: string }                         (* GMBC *)
                             (* NameResponse | ErrorResponse *)
                           | MergeBangBoxesAction of { bangBoxNames: string list }                     (* GMBM *)
                             (* OkResponse | ErrorResponse *)
                           | BangVerticesAction of { bangBoxName: string, vertexNames: string list }   (* GMBB *)
                             (* OkResponse | ErrorResponse *)
                           | SetBangBoxUserDataAction of { bangBoxName: string, userData: string }     (* GMBU *)

       and response = SuccessResponse of { requestId: string }                 (* O *)
                    | ErrorResponse of { requestId: string, message: string }  (* X *)
                    | DataResponse of { requestId: string, data: string }      (* R *)

                    | ConsoleCommandListResponse of { requestId: string, commands: string list } (* L *)
                    | ConsoleCommandHelpResponse of { requestId: string, helpText: string }      (* H *)

                    | NameResponse of { requestId: string, name: string } (* N *)
                    | NameListResponse of { requestId: string, name: string } (* M *)
                    | GraphDescriptionResponse of { requestId: string, graph: graphDesc } (* G *)
                    | VertexDescriptionResponse of { requestId: string, vertex: vertexDesc } (* V *)
                    | EdgeDescriptionResponse of { requestId: string, edge: edgeDesc } (* E *)
                    | ComponentDataResponse of { requestId: string, data: componentData } (* D *)
                    | UserDataResponse of { requestId: string, data: string } (* U *)
                    | RewriteListResponse of { requestId: string, rewrites: rewriteDesc list } (* W *)

                    | UnknownResponse of { startChar: char }

       and rewriteDesc = RewriteDesc of { ruleName: string, result: graphDesc, lhs: graphDesc, rhs: graphDesc }
       and graphDesc = GraphDesc of { name: string, graphName: string, vertices: vertexDesc list, edges: edgeDesc list, bangBoxen: bangBoxDesc list }
       and vertexDesc = VertexDesc of { name: string, data: componentData, userData: string }
       and edgeDesc = EdgeDesc of { name: string, sourceName: string, targetName: string, directed: bool, data: componentData, userData: string }
       and bangBoxDesc = BangBoxDesc of { name: string, vertexNames: string list }

       and componentData = UnitData
                         | StringData of string
                         | LinratExprData of LinratExpr.T
                         | ListData of componentData list
end;

(* vi:ts=2:sw=2:sts=2:et
*)
