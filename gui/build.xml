<?xml version="1.0"?>
<project name="QuantoGui" default="jar" basedir=".">
  <description>
    Build the Quantomatic GUI as a JAR file.
  </description>
  
  <!-- set global properties for this build -->
  <property name="src" location="src"/>
  <property name="build" location="build"/>
  <property name="dist" location="dist"/>
  <property name="appdir" location="${dist}/Quantomatic"/>
  <property name="appname" value="Quantomatic" />
  <property name="lib" location="lib"/>
  <property environment="env" />
  
  
  <!-- classpath we use for building, just all the JARs in ${lib} -->
  <path id="quanto.path">
    <fileset dir="${lib}">
      <include name="*.jar"/>
    </fileset>
  </path>
  
  <target name="init">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
    <!-- Make sure quanto core is up to date -->
    <exec executable="make" dir="../core">
	    <arg value="bin" />
	  </exec>
  </target>
  <target name="compile" depends="init" description="compile the source ">
    <!-- Compile the java code from ${src} into ${build} -->
    <javac srcdir="${src}" destdir="${build}">
      <classpath refid="quanto.path" />
    </javac>
  </target>
  <target name="jar" depends="compile" description="generate the distribution">
    <!-- There's probably a better way to do this. Unjar'ing all the deps
         onto the build tree. -->
    <unjar src="${lib}/collections-generic-4.01.jar" dest="${build}" />
    <unjar src="${lib}/colt-1.2.0.jar" dest="${build}" />
    <unjar src="${lib}/concurrent-1.3.4.jar" dest="${build}" />
    <unjar src="${lib}/jung-algorithms-2.0-beta1.jar" dest="${build}" />
    <unjar src="${lib}/jung-api-2.0-beta1.jar" dest="${build}" />
    <unjar src="${lib}/jung-graph-impl-2.0-beta1.jar" dest="${build}" />
    <unjar src="${lib}/jung-visualization-2.0-beta1.jar" dest="${build}" />
    <unjar src="${lib}/nanoxml-2.2.3.jar" dest="${build}" />
    <unjar src="${lib}/itext.jar" dest="${build}" />
    
    <!-- remove the META-INF from the other jar files. Ant will make a new one. -->
    <delete dir="${build}/META-INF" />
    
    <!-- Create the distribution directory -->
    <mkdir dir="${dist}"/>
    <!-- Put everything in ${build} into the QuantoGui.jar file -->
    <jar jarfile="${dist}/QuantoGui.jar" index="yes">
      <fileset dir="${build}" />
      <manifest>
        <attribute name="Main-Class" value="quanto.gui.QuantoApp" />
      </manifest>
    </jar>
  </target>
  
  
  <target name="macapp" depends="jar" description="build OS X application">
    <mkdir dir="${appdir}"/>
    <delete dir="${appdir}/${appname}.app" />
    <unzip src="app_skel.zip" dest="${appdir}" />
    <mkdir dir="${appdir}/${appname}.app/Contents/Frameworks" />
    <copy file="${dist}/QuantoGui.jar" todir="${appdir}/${appname}.app/Contents/Resources/Java" />
    <copy file="../core/bin/quanto-core"
          tofile="${appdir}/${appname}.app/Contents/MacOS/quanto-core-app" />
    
    <!-- use otool to discover the appropriate libpolyml -->
    <exec executable="bash" outputproperty="libpolyml" inputstring=
          "otool -L ${appdir}/${appname}.app/Contents/MacOS/quanto-core-app | awk '/polyml/ {print $1}'" />
    
    <echo message="Importing ${libpolyml}" />
    
    <copy file="${libpolyml}"
          tofile="${appdir}/${appname}.app/Contents/Frameworks/libpolyml.dylib" />
    
    <!-- update linked library refs -->
    <exec executable="install_name_tool">
      <arg value="-id" />
      <arg value="@executable_path/../Frameworks/libpolyml.dylib" />
      <arg value="${appdir}/${appname}.app/Contents/Frameworks/libpolyml.dylib" />
    </exec>
    <exec executable="install_name_tool">
      <arg value="-change" />
      <arg value="${libpolyml}" />
      <arg value="@executable_path/../Frameworks/libpolyml.dylib" />
      <arg value="${appdir}/${appname}.app/Contents/MacOS/quanto-core-app" />
    </exec>
    
    <!-- ant does not preserve perms, boo -->
    <chmod file="${appdir}/${appname}.app/Contents/MacOS/JavaApplicationStub" perm="+x" />
    <chmod file="${appdir}/${appname}.app/Contents/MacOS/quanto-core-app" perm="+x" />
    <chmod file="${appdir}/${appname}.app/Contents/MacOS/dot_static" perm="+x" />
    <chmod file="${appdir}/${appname}.app/Contents/Frameworks/libpolyml.dylib" perm="+x" />
  </target>
  <target name="dmg" depends="macapp" description="create compressed DMG for distribution">
    <delete file="${dist}/${appname}.dmg" />
    <exec executable="hdiutil">
      <arg line="create -fs HFS+ -srcfolder ${appdir} -volname ${appname} ${dist}/${appname}.dmg" />
    </exec>
  </target>
  <target name="run" depends="jar" description="run quanto">
    <java jar="${dist}/QuantoGui.jar" fork="true" />
  </target>
  <target name="clean" description="clean up">
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
  </target>
</project>
