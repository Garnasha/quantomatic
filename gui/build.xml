<?xml version="1.0"?>
<project name="QuantoGui" default="jar" basedir=".">
  <description>
    Build the Quantomatic GUI as a JAR file.
  </description>

  <!-- set global properties for this build -->
  <property name="root" location="../" />
  <property name="build" location="build"/>
  <property name="build.debug" location="build-debug"/>
  <property name="dist" location="dist"/>
  <property name="appdir" location="${dist}/Quantomatic"/>
  <property name="appname" value="Quantomatic" />
  <property name="lib" location="lib"/>
  <property name="resources" location="resources"/>
  <property environment="env" />


  <!-- classpath we use for building, just all the JARs in ${lib} -->
  <path id="quanto.classpath.build">
    <fileset dir="${lib}">
      <include name="*.jar"/>
    </fileset>
  </path>
  <!-- classpath we use for running: all the JARs in ${lib} and the built files -->
  <path id="quanto.classpath.run">
    <fileset dir="${lib}">
      <include name="*.jar"/>
    </fileset>
    <pathelement path="${build}"/>
    <pathelement path="${resources}"/>
  </path>
  <!-- classpath we use for debugging all the JARs in ${lib} and the built files -->
  <path id="quanto.classpath.debug">
    <fileset dir="${lib}">
      <include name="*.jar"/>
    </fileset>
    <pathelement path="${build.debug}"/>
    <pathelement path="${resources}"/>
  </path>

  <target name="init">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
    <mkdir dir="${build.debug}"/>
    <!-- Make sure quanto core is up to date -->
    <exec executable="make" dir="../core" failonerror="true">
      <arg value="bin" />
    </exec>
    <mkdir dir="generated/org/lindenb/svg/path"/>
    <javacc target="lindenb-src/org/lindenb/svg/path/SVGPathParser.jj" javacchome="lib" outputdirectory="generated/org/lindenb/svg/path"/>
  </target>
  <target name="compile" depends="init" description="Compile Quantomatic">
    <javac destdir="${build}" includeantruntime="false">
      <src path="src" />
      <src path="jung-src" />
      <src path="lindenb-src" />
      <src path="generated" />
      <classpath refid="quanto.classpath.build" />
    </javac>
    <copy todir="${build}">
	    <fileset dir="src">
		    <include name="**/resources/*" />
	    </fileset>
	    <fileset dir="jung-src">
		    <include name="**/resources/*" />
	    </fileset>
    </copy>
  </target>
  <target name="compile.debug" depends="init" description="Compile Quantomatic with debugging symbols">
    <!-- Use this for ide integration.  eg: for a NetBeans freeform project,
         use the following code in ide-file-targets.xml
	 (see http://www.netbeans.org/kb/articles/freeform-config.html#debugj2se)

    <import file="../build.xml"/>
    <target name="debug-nb" depends="compile.debug">
        <nbjpdastart addressproperty="jpda.address" name="QuantoGui" transport="dt_socket">
            <classpath refid="quanto.classpath.debug"/>
        </nbjpdastart>
        <property environment="env" />
        <java classname="quanto.gui.QuantoApp" fork="true">
            <classpath refid="quanto.classpath.debug"/>
            <env key="PATH" path="${root}/core/bin:${env.PATH}" />
            <jvmarg value="-Xdebug"/>
            <jvmarg value="-Xrunjdwp:transport=dt_socket,address=${jpda.address}"/>
        </java>
    </target>

    -->
    <javac destdir="${build.debug}" includeantruntime="false" debug="true">
      <src path="src" />
      <src path="jung-src" />
      <src path="lindenb-src" />
      <src path="generated" />
      <classpath refid="quanto.classpath.build" />
      <compilerarg value="-Xlint:unchecked" />
      <compilerarg value="-Xlint:deprecation" />
    </javac>
    <copy todir="${build.debug}">
	    <fileset dir="src">
		    <include name="**/resources/*" />
	    </fileset>
	    <fileset dir="jung-src">
		    <include name="**/resources/*" />
	    </fileset>
    </copy>
  </target>
  <target name="jar" depends="compile" description="Generate a single-file distribution">
    <!-- Create the distribution directory -->
    <mkdir dir="${dist}"/>
    <!-- Put everything in ${build} into the QuantoGui.jar file -->
    <jar jarfile="${dist}/temp_final.jar" index="yes" filesetmanifest="skip">
      <fileset dir="${build}" />
      <zipfileset src="${lib}/iText-5.0.6.jar" excludes="META-INF/**" />
      <zipfileset src="${lib}/collections-generic-4.01.jar" excludes="META-INF/**" />
      <zipfileset src="${lib}/colt-1.2.0.jar" excludes="META-INF/**" />
      <zipfileset src="${lib}/jackson-annotations-2.1.0.jar" excludes="META-INF/**" />
      <zipfileset src="${lib}/jackson-core-2.1.0.jar" excludes="META-INF/**" />
      <zipfileset src="${lib}/jackson-databind-2.1.0.jar" excludes="META-INF/**" />
      <fileset dir="${resources}"/>
      <manifest>
        <attribute name="Main-Class" value="quanto.gui.QuantoApp" />
      </manifest>
    </jar>
    <zip destfile="${dist}/QuantoGui.jar">
      <zipfileset src="${dist}/temp_final.jar"
                  excludes="META-INF/*.SF, META-INF/*.DSA, META-INF/*.RSA"/>
    </zip>
    <delete file="${dist}/temp_final.jar" />
  </target>
  <target name="macapp" depends="jar" description="Build Mac OS X application">
    <mkdir dir="${appdir}"/>
    <delete dir="${appdir}/${appname}.app" />
    <unzip src="app_skel.zip" dest="${appdir}" />
    <mkdir dir="${appdir}/${appname}.app/Contents/Frameworks" />
    <copy file="${dist}/QuantoGui.jar" todir="${appdir}/${appname}.app/Contents/Resources/Java" />
    <copy file="../core/bin/quanto-core"
          tofile="${appdir}/${appname}.app/Contents/MacOS/quanto-core-app" />

    <!-- use otool to discover the appropriate libpolyml -->
    <exec executable="bash" outputproperty="libpolyml" inputstring=
          "otool -L ${appdir}/${appname}.app/Contents/MacOS/quanto-core-app | awk '/polyml/ {print $1}'" />

    <echo message="Importing ${libpolyml}" />

    <copy file="${libpolyml}"
          tofile="${appdir}/${appname}.app/Contents/Frameworks/libpolyml.dylib" />

    <!-- update linked library refs -->
    <exec executable="install_name_tool">
      <arg value="-id" />
      <arg value="@executable_path/../Frameworks/libpolyml.dylib" />
      <arg value="${appdir}/${appname}.app/Contents/Frameworks/libpolyml.dylib" />
    </exec>
    <exec executable="install_name_tool">
      <arg value="-change" />
      <arg value="${libpolyml}" />
      <arg value="@executable_path/../Frameworks/libpolyml.dylib" />
      <arg value="${appdir}/${appname}.app/Contents/MacOS/quanto-core-app" />
    </exec>

    <!-- ant does not preserve perms, boo -->
    <chmod file="${appdir}/${appname}.app/Contents/MacOS/JavaApplicationStub" 
	       perm="+x" />
    <chmod file="${appdir}/${appname}.app/Contents/MacOS/quanto-core-app" 
	       perm="+x" />
    <chmod file="${appdir}/${appname}.app/Contents/MacOS/dot_static"
	       perm="+x" />
    <chmod file="${appdir}/${appname}.app/Contents/Frameworks/libpolyml.dylib" 
	       perm="+x" />
	
  </target>

  <target 	name="dmg"
			depends="macapp"
			description="Create compressed DMG for distribution on Mac OS X">
    
	<delete file="${dist}/${appname}.dmg" />
	<mkdir dir="${appdir}/theories" />
	<mkdir dir="${appdir}/examples" />
	<copy todir="${appdir}/examples">
		<fileset dir="${root}/examples">
			<include name="*.graph" />
		</fileset>
	</copy>
	
	<copy todir="${appdir}/theories">
		<fileset dir="${root}/theories">
			<include name="*.theory" />
		</fileset>
	</copy>
	
    <exec executable="hdiutil">
      <arg line="create -fs HFS+ -srcfolder ${appdir} -volname ${appname} ${dist}/${appname}.dmg" />
    </exec>
  </target>
  <target name="run" depends="compile" description="Run Quantomatic">
    <property environment="env" />
    <java classname="quanto.gui.QuantoApp" fork="true">
      <classpath refid="quanto.classpath.run" />
      <env key="PATH" path="${root}/core/bin/:${env.PATH}" />
    </java>
  </target>
  <target name="run.debug" depends="compile.debug" description="Run Quantomatic">
    <property environment="env" />
    <java classname="quanto.gui.QuantoApp" fork="true">
      <classpath refid="quanto.classpath.debug" />
      <env key="PATH" path="${root}/core/bin/:${env.PATH}" />
    </java>
  </target>
  <target name="clean" description="Delete build-time files">
    <!-- Delete the ${build}, ${build.debug} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${build.debug}"/>
    <delete dir="${dist}"/>
  </target>
    <target depends="compile.debug" description="Debug Quantomatic (NetBeans)" name="debug-nb">
        <fail unless="netbeans.home">This target can only run inside the NetBeans IDE.</fail>
        <property environment="env"/>
        <nbjpdastart addressproperty="jpda.address" name="QuantoGui" transport="dt_socket">
            <classpath refid="quanto.classpath.debug"/>
        </nbjpdastart>
        <java classname="quanto.gui.QuantoApp" fork="true">
            <classpath refid="quanto.classpath.debug"/>
            <env key="PATH" path="${root}/core/bin/:${env.PATH}"/>
            <jvmarg value="-Xdebug"/>
            <jvmarg value="-Xrunjdwp:transport=dt_socket,address=${jpda.address}"/>
        </java>
    </target>
    <target name="profile-nb" depends="compile.debug" description="Profile Quantomatic (NetBeans)">
        <fail unless="netbeans.home">This target can only run inside the NetBeans IDE.</fail>

        <nbprofiledirect>
            <classpath refid="quanto.classpath.debug"/>
        </nbprofiledirect>

        <java classname="quanto.gui.QuantoApp" fork="true">
            <classpath refid="quanto.classpath.debug"/>
            <env key="PATH" path="${root}/core/bin/:${env.PATH}"/>
            <jvmarg value="${profiler.info.jvmargs.agent}"/>
        </java>
    </target>
</project>
